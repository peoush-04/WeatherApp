/* —> all: unset;
The CSS property all: unset; resets all the properties of an element to their initial values, effectively undoing any previous styles applied to the element.
The all property is a shorthand property that resets all the properties, including the inherited ones, of an element to their initial values. This means that all styles applied to the element, either directly or inherited from its parent, are removed and the element is reverted to its default styling.
Using all: unset; is a powerful way to reset an element's styling to its default state, especially if the element has inherited styles or has been styled by multiple CSS rules. However, it's worth noting that all is a relatively new CSS property and may not be supported by older browsers. In such cases, it's recommended to use individual property reset rules or a CSS reset stylesheet. */


/* ——> object—fit: contain;
The CSS property object-fit: contain; specifies how an element's content, such as an image or video, should be resized to fit within its
container while maintaining its aspect ratio.
When object-fit is set to contain, the content is scaled to fit within the container while preserving its aspect ratio. This means tha the entire content will be visible within the container, but there may be empty space on the sides if the content is narrower than the container or on the top and bottom if it's shorter.
The contain value scales the content proportionally so that it is fully visible and as large as possible without overflowing the container. This means that the content will never be cropped or distorted. If the content is smaller than the container, it will be centered within it. */

/* ——> object—fit: cover;
The CSS property object-fit: cover; specifies how an element's content, such as an image or video, should be resized to cover its
container while maintaining its aspect ratio.
When object-fit is set to cover the content is scaled to completely cover the container while preserving its aspect ratio. This means that the entire container will be filled with the content, even if it means cropping some of the content on the sides or on the top and bottom.
The cover value scales the content proportionally so that the longest side of the content completely covers the longest side of the container.
This means that some of the content may be cropped if it's narrower or shorter than the container, but it ensures that the content fills the container without distorting it.
The obiect-fit property is commonly used with elements that have fixed dimensions, such as and elements, and is
particularly useful for creating responsive designs. It's worth noting that the object-fit property is not supported by some older browsers,
so it's important to test your design across multiple browsers and consider fallback solutions for unsupported browsers. */


*,*::before,*::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Merriweather Sans', sans-serif;
}

:root {
    --colorDark1: #112D4E;
    --colorDark2: #3F72AF;
    --colorLight1: #DBE2EF;
    --colorLight2: #F9F7F7;
}

.wrapper{
    width:100vw;
    height:100vh;
    color: var(--colorLight2);
    background-image: linear-gradient(160deg, #112d4e 0%, #3f72af 100%);;
}

h1{
    text-align: center;
    text-transform: uppercase;
    padding-top: 20px;
}

.tab-container{
    display: flex;
    justify-content: space-between;
    max-width: 37%;
    margin: 0 auto;
    margin-top: 3rem;
}

.tab{
    cursor: pointer;
    font-size: 1rem;
    letter-spacing: 1.75px;
    padding: 5px 8px;
}

.current-tab{
    background-color: rgba(219, 226, 239, 0.5);
    border-radius: 4px;
}

.weather-container{
    width: 39%;
    margin: 0 auto;
    margin-top: 4rem;
}


.grant-location-container{
    /* //initially keep all the tabs as display none . according to user clicks we will provide the active class to the tabs  */
    display: none;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    gap: 1rem;
}

.grant-location-container p:first-of-type{
    font-size: 1.75rem;
    font-weight: 600; 
}

.grant-location-container p:last-of-type{
    font-size:1rem;
    font-weight: 500;
    margin-top: 0.75rem;
    margin-bottom: 1.75rem;
    letter-spacing: 0.75px;
}

.btn{
    appearance: none;
    border: none;
    background-color: var(--colorDark2);
    color: var(--colorLight2);
    padding: 0.8rem 1rem;
    text-transform: uppercase;
    letter-spacing: 0.75px;
    border-radius: 10px;
    font-weight:500;
}

.search-container{
    display: none;
    width: 100%;
    margin: 0 auto;
    justify-content: space-between;
    align-items: center;

}

.search-container input{
    all:unset;
    width: 80%;
    background-color: rgba(219, 226, 239, 0.5);
    border-radius: 8px;
    color: var(--colorLight2);
    padding: 10px 20px;
    font-size: 1.1rem;
    font-weight: 500;
}

.search-container input::placeholder{
    color: var(--colorLight2);
}

.search-container input:focus{
    outline: 3px solid rgba(255, 255, 255, 0.7);;
}

.loading-container{
    display: none;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.weather-info-container{
    display: none;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    margin-top: 3rem;
}

.weather-info-container .name{
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
}

.weather-info-container .name p{
    font-size: 2rem;
}
.weather-info-container p{
    font-size: 1.5rem;
}


.weather-info-container .cards{
    margin-top: 1rem;
    display: flex;
    width: 100%;
    gap: 10px;
    justify-content: space-around;
}

/* for image display:none and dsiplay:flex was not working , so wr tried scale 0 and scale 1  */
.error-not-found{
    /* //initially scale 0  */
    transform: scale(0);
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 4rem;
}

.active{
    display: flex;
}

.activeimg{
    transform: scale(1);
}